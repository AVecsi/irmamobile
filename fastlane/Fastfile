before_all do
  skip_docs()
  # Ensure that build and profiles directories are present in fastlane directory.
  sh("mkdir -p ./build/ ./profiles/")
end

lane :lint do
  Dir.chdir("..") do
    sh("flutter", "format", "--line-length", "120", "--set-exit-if-changed", "lib/", "test/", "integration_test/")
    # TODO: Remove --no-fatal-warnings option when all warnings are resolved.
    sh("flutter", "analyze", "--no-fatal-infos", "--no-fatal-warnings")
  end
end

lane :unit_test do
  Dir.chdir("..") do
    # TODO: remove --no-sound-null-safety option when all unit tests use null-safely
    sh("flutter", "test", "--no-sound-null-safety")
  end
end

lane :alpha_resign do
  apks = Dir['../build/app/outputs/apk/alpha/release/*.apk']
  apks.each do |apk|
    sh("apksigner", "sign",
      "--ks", ENV["ANDROID_SIGN_KEYSTORE"],
      "--ks-key-alias", ENV["ANDROID_SIGN_KEY_ALIAS"],
      "--ks-pass", "pass:"+ENV["ANDROID_SIGN_STORE_PASSWORD"],
      "--key-pass", "pass:"+ENV["ANDROID_SIGN_KEY_PASSWORD"],
      apk)
  end
end

lane :beta_resign do
  apks = Dir['../build/app/outputs/apk/beta/release/*.apk']
  apks.each do |apk|
    sh("apksigner", "sign",
      "--ks", ENV["ANDROID_SIGN_KEYSTORE"],
      "--ks-key-alias", ENV["ANDROID_SIGN_KEY_ALIAS"],
      "--ks-pass", "pass:"+ENV["ANDROID_SIGN_STORE_PASSWORD"],
      "--key-pass", "pass:"+ENV["ANDROID_SIGN_KEY_PASSWORD"],
      apk)
  end
end

lane :alpha_build do
  alpha_android_build()
  alpha_ios_build()
end

lane :beta_build do
  beta_android_build()
  beta_ios_build()
end

lane :alpha_android_build do
    android_build_irmagobridge()
    android_build_app(flavor: "alpha", target_platform: "android-arm", sentry_dsn: ENV["SENTRY_DSN_ALPHA"])
    android_build_app(flavor: "alpha", target_platform: "android-arm64", sentry_dsn: ENV["SENTRY_DSN_ALPHA"])
    android_build_app(flavor: "alpha", target_platform: "android-x64", sentry_dsn: ENV["SENTRY_DSN_ALPHA"])
end

lane :beta_android_build do
  android_build_irmagobridge()
  android_build_app(flavor: "beta", target_platform: "android-arm", sentry_dsn: ENV["SENTRY_DSN_PROD"])
  android_build_app(flavor: "beta", target_platform: "android-arm64", sentry_dsn: ENV["SENTRY_DSN_PROD"])
  android_build_app(flavor: "beta", target_platform: "android-x64", sentry_dsn: ENV["SENTRY_DSN_PROD"])
end

lane :android_build_app do |options|
  update_schemes()
  commit = last_git_commit()
  write_sentrydata(
    dsn: options[:sentry_dsn],
    version: commit[:commit_hash]
  )

  # We use the React Native build numbering (with base 0x100000 and different multipliers per target platform)
  # Flutter modifies the build number that we specify with its own build number base and target platform multiplier.
  # Therefore, we have to correct this by subtracting the value that Flutter will add.
  build_number = get_flutter_build_number()
  case options[:target_platform]
  when "android-arm"
    build_number += 0x100000 - 1000
  when "android-arm64"
    build_number += 0x300000 - 2000
  when "android-x64"
    build_number += 0x400000 - 4000
  else
    raise "Unsupported target platform"
  end

  Dir.chdir("..") do
    sh(
      "flutter", "build", "apk",
      "--split-per-abi",
      "--flavor", options[:flavor],
      "--target-platform", options[:target_platform],
      "--build-number", build_number.to_s,
      "--release"
    )
    sh("cp ./build/app/outputs/apk/#{options[:flavor]}/release/*.apk ./fastlane/build/")
  end
end

lane :alpha_ios_build do
  ios_build_irmagobridge()
  ios_build_app(flavor: "alpha", sentry_dsn: ENV["SENTRY_DSN_ALPHA"])
end

lane :beta_ios_build do
  ios_build_irmagobridge()
  ios_build_app(flavor: "beta", sentry_dsn: ENV["SENTRY_DSN_PROD"])
end

lane :ios_build_app do |options|
  display_name = ""
  app_identifier = ""
  export = options[:export] || true
  export_options = ""
  # For now, we assume that alpha builds are meant for ad hoc distribution and beta builds for app store distribution.
  case options[:flavor]
  when "alpha"
    display_name = "IRMA 2020"
    app_identifier = "foundation.privacybydesign.irmamob.alpha"
    export_options = "./ios/AdHocExportOptions.plist"
  when "beta"
    display_name = "IRMA"
    app_identifier = "foundation.privacybydesign.irmamob"
    export_options = "./ios/AppStoreExportOptions.plist"
  else
    raise "Unsupported flavor"
  end

  update_schemes()
  update_app_identifier(
    xcodeproj: "ios/Runner.xcodeproj",
    plist_path: "Runner/Info.plist",
    app_identifier: app_identifier
  )
  update_info_plist(
    xcodeproj: "ios/Runner.xcodeproj",
    plist_path: "Runner/Info.plist",
    display_name: display_name
  )
  commit = last_git_commit()
  write_sentrydata(
    dsn: options[:sentry_dsn],
    version: commit[:commit_hash]
  )

  keychain_path = ""
  unless !export || options[:provisioning_profile_path].empty?
    Dir.chdir("../ios") do
      keychain_path = "../fastlane/profile/apple_distribution.keychain"
      create_keychain(
        path: keychain_path,
        password: options[:certificate_password],
        unlock: true,
        timeout: 600
      )
      import_certificate(
        certificate_path: "../fastlane/#{options[:certificate_path]}",
        certificate_password: options[:certificate_password],
        keychain_path: keychain_path,
        keychain_password: options[:certificate_password]
      )
      update_provisioning_profile(
        xcodeproj: "Runner.xcodeproj",
        profile: "../fastlane/#{options[:provisioning_profile_path]}"
      )
    end
  end

  Dir.chdir("..") do
    if export
      sh("flutter", "build", "ipa", "--release", "--export-options-plist", export_options)
      sh("cp ./build/ios/ipa/*.ipa ./fastlane/build/")
    else
      # Unexported builds can be useful for testing this lane in development.
      sh("flutter", "build", "ios", "--release", "--no-codesign")
    end
  end

  unless keychain_path.empty?
    Dir.chdir("../ios") do
      delete_keychain(keychain_path: keychain_path)
    end
  end
end

lane :android_build_irmagobridge do
  Dir.chdir("..") do
    sh("gomobile", "bind", "-target", "android", "-o", "android/irmagobridge/irmagobridge.aar", "github.com/privacybydesign/irmamobile/irmagobridge")
  end
end

lane :ios_build_irmagobridge do
  Dir.chdir("..") do
    sh("gomobile", "bind", "-target", "ios", "-iosversion", "12.0", "-o", "ios/Runner/Irmagobridge.xcframework", "github.com/privacybydesign/irmamobile/irmagobridge")
  end
end

lane :update_schemes do
  Dir.chdir("../irma_configuration/pbdf") do
    sh("git", "checkout", "master")
    sh("git", "pull", "-f")
  end
  Dir.chdir("../irma_configuration/pbdf-requestors") do
    sh("git", "checkout", "master")
    sh("git", "pull", "-f")
  end
  Dir.chdir("../irma_configuration/irma-demo") do
    sh("git", "checkout", "master")
    sh("git", "pull", "-f")
    sh("rm", "-f", "sk.pem")
  end
  Dir.chdir("../irma_configuration/irma-demo-requestors") do
    sh("git", "checkout", "master")
    sh("git", "pull", "-f")
  end
end

lane :write_sentrydata do |options|
  erb(
    template: "fastlane/sentry_dsn.erb",
    destination: "lib/sentry_dsn.dart",
    placeholders: {
      :dsn => options[:dsn],
      :version => options[:version]
    }
  )
end

private_lane :get_flutter_build_number do
  Dir.chdir("..") do
    file = File.open("pubspec.yaml")
    file_data = file.read
    file.close
    file_data.match(/version:(.*)\+(\d+)/).captures[1].to_i
  end
end
